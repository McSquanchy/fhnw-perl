Student ID:  [16-939-662]
Family Name: [Buman]
First Name:  [Kevin]

INSTRUCTIONS:

Fill in your student ID number, and names in the boxes above.

Complete this exam by placing an 'X' in the box
beside the only correct answer to each question, like so:

    [ ] This is not the correct answer
    [ ] This is not the correct answer either
    [ ] This is an incorrect answer
    [X] This is the correct answer
    [ ] This is an irrelevant answer

Scoring: Each question is worth 2 points.
         Final score will be: SUM / 10

Warning: Each question has only one correct answer. Answers to questions
         for which two or more boxes are marked with an 'X' will be scored as zero.

Total number of questions: 30


================================================================================
                                 START OF EXAM
================================================================================

________________________________________________________________________________

 1. The static type of a Perl variable is determined by:

    [X] The compile-time type declarator of the variable
    [ ] Random chance
    [ ] The type of the first value placed in the variable
    [ ] The name of the variable
    [ ] Nothing: Perl variables don't have a static type


________________________________________________________________________________

 2. Perl's three main types of call context (or "amount context") are:

    [X] List, scalar, and void
    [ ] Blood, sweat, and tears
    [ ] List, scalar, and null
    [ ] List, linear, and void
    [ ] Null, scalar, and void


________________________________________________________________________________

 3. The "default variable" (or "topic variable") is:

    [ ] $$
    [X] $_
    [ ] The last variable that was successfully assigned to
    [ ] @_
    [ ] $=


________________________________________________________________________________

 4. You can access the command-line arguments of a Perl program via:

    [ ] @ARGC
    [ ] $ARGV
    [ ] @ARGS
    [ ] @_
    [X] @ARGV


________________________________________________________________________________

 5. The main repository for Open Source Perl modules is:

    [ ] www.perl.org
    [ ] CSPAN
    [ ] Github
    [X] CPAN
    [ ] Perlhub


________________________________________________________________________________

 6. The three standard sigils for variable declarations are:

    [ ] '$' for lookups, '@' for reuses, '%' for declarations
    [X] '$' for scalars, '@' for arrays, '%' for hashes
    [ ] '$' for numeric, '@' for emails, '%' for percentages
    [ ] '$' for scalars, '@' for consts, '%' for literals
    [ ] '$' for scalars, '@' for hashes, '%' for arrays


________________________________________________________________________________

 7. The difference between a 'my' variable and an 'our' variable is:

    [X] 'my' variables are lexically scoped;  'our' variables are package scoped
    [ ] 'my' variables must be scalars;       'our' variables must be arrays or hashes
    [ ] 'my' variables are subroutine scoped; 'our' variables are block scoped
    [ ] 'my' variables are compile-time;      'our' variables are run-time
    [ ] 'my' variables are assignable;        'our' variables are constants


________________________________________________________________________________

 8. A single-quoted string (such as: 'I will achieve 100% on this exam')...

    [ ] ...only interpolates backslashed escape sequences, but not variables
    [X] ...does not interpolate variables or backslashed escape sequences
    [ ] ...only interpolates variables, but not backslashed escape sequences
    [ ] ...interpolates both variables and backslashed escape sequences
    [ ] ...converts its contents to ASCII, even if they are Unicode characters


________________________________________________________________________________

 9. The term qq{XXXXX} is...

    [X] ...another way of writing the double-quoted string: "XXXXX"
    [ ] ...another way of writing the list of strings:  ('X', 'X', 'X', 'X', 'X')
    [ ] ...another way of writing the single-quoted string: 'XXXXX'
    [ ] ...another way of writing the array of strings: ['X', 'X', 'X', 'X', 'X']
    [ ] ...a call to the 'qq' function, passing it a block of code


________________________________________________________________________________

10. Which of the following is NOT a single valid Perl number?

    [ ] 1.042e3
    [ ] 1042
    [X] 1'042
    [ ] 0b10000010010
    [ ] 1_042


________________________________________________________________________________

11. An array is...

    [X] A container for a list
    [ ] Something that is always contained inside a list
    [ ] A multidimensional list
    [ ] A list with a predeclared fixed number of elements
    [ ] Exactly the same as a list


________________________________________________________________________________

12. An 'if' statement requires curly brackets around the statements it controls...

    [ ] ...never; the curly brackets are always optional in an 'if' statement
    [ ] ...only if it controls exactly one statement
    [ ] ...only if the statements it controls include any variables declarations
    [ ] ...only if it controls two or more statements
    [X] ...in all circumstances


________________________________________________________________________________

13. To specify a second alternative test after an 'if', the correct keyword is:

    [ ] elif
    [ ] ormaybe (with no whitespace between the two words)
    [ ] elseif  (with no whitespace between the two words)
    [ ] else if (with any amount of whitespace between the two words)
    [X] elsif


________________________________________________________________________________

14. "Short-circuiting" of a boolean expression means...

    [ ] ...Perl defers evaluating the expression until the result is tested
    [ ] ...Perl programs can cause CPUs to spark if an expression is too complex
    [X] ...Perl evaluates as little as required to get a definite answer
    [ ] ...Perl only evaluates each boolean expression once during the program
    [ ] ...Perl will never execute an 'else' block


________________________________________________________________________________

15. A "foreach-style" loop (such as: for (@list) {...}) will be iterated...

    [ ] ...an unknown number of times, until the list being iterated is empty
    [ ] ...endlessly, until a 'last' is executed in the loop
    [ ] ...once per element in the list in all circumstances
    [ ] ...never, because an array is not a list and cannot be iterated
    [X] ...once per element in the list, unless a 'last' or 'redo' is executed in the block


________________________________________________________________________________

16. The 'while' loop in Perl...

    [ ] ...iterates until its condition becomes true anywhere within its block
    [ ] ...iterates until its condition becomes false anywhere within its block
    [ ] ...iterates until its condition is true at the start of an iteration
    [X] ...iterates until its condition is false at the start of an iteration
    [ ] ...doesn't exist; Perl does not have a 'while' loop


________________________________________________________________________________

17. The keywords for the Perl switch statement are:

    [ ] 'case'   and 'of'      and 'or'
    [X] 'switch' and 'case'    and 'else'
    [ ] 'given'  and 'when'    and 'default'
    [ ] 'whence' and 'whither' and 'thither'
    [ ] 'gather' and 'take'    and 'otherwise'


________________________________________________________________________________

18. Which five Perl values are the only values that evaluate false?

    [ ] False, Nil, Null, None, Empty
    [ ] 0, +0, -0, 0.0, -0.0
    [ ] 0, '0', '', (), []
    [X] 0, '0', '', (), undef
    [ ] 0, '0', 'false', 'False', 'FALSE'


________________________________________________________________________________

19. If the array @x contains four elements,
    how many elements will be in the list (1, @x, 2)?

    [ ] None:  it won't compile; arrays can't be used in list constructors
    [ ] Eight: 1 * 4 * 2 = 8
    [X] Six:   the four array elements will be flattened into the list
    [ ] Two:   Perl ignores non-scalar variables in a list constructor
    [ ] Three: the array will become a single element within the list


________________________________________________________________________________

20. A hash variable stores...

    [ ] Values of any scalar or list type, indexed by keys that are always strings
    [ ] Random values, indexed by sequential keys of any type
    [X] Values of any scalar type, indexed by keys that are always strings
    [ ] Values that are unique, indexed by keys that may be repeated
    [ ] Values that are always strings, indexed by keys of any type


________________________________________________________________________________

21. The expression 1 / 'Inf' produces the result:

    [X] 0 (because that's the correct mathematical outcome)
    [ ] A non-fatal warning (because 'Inf' is a string, not a number)
    [ ] A fatal exception (because 'Inf' is a string, not a number)
    [ ] An infinite evaluation loop; the program will run forever
    [ ] 1 (as a convenience, to avoid subsequent division by zero)


________________________________________________________________________________

22. A "reference" in Perl is most like:

    [X] An alias (i.e. another name) for an existing variable
    [ ] A type-safe immutable pointer to an existing value or variable
    [ ] A link to the documentation for an existing value or variable
    [ ] A deep copy of an existing variable or value
    [ ] A mutable pointer to a value or variable, without type-checking


________________________________________________________________________________

23. In Perl, you can take references to...

    [X] ...scalars, arrays, hashes, and subroutines
    [ ] ...only scalars (NOT to arrays, hashes, or subroutines)
    [ ] ...scalars, arrays, and hashes, but NOT subroutines
    [ ] ...scalars and arrays, but NOT hashes or subroutines
    [ ] ...arrays and hashes (i.e. containers), but NOT scalars or subroutines


________________________________________________________________________________

24. User-defined subroutines are declared with the keyword:

    [ ] 'subroutine'
    [X] 'sub'
    [ ] 'fun'
    [ ] 'do'
    [ ] Nothing: subroutines are not explicitly declared in Perl


________________________________________________________________________________

25. By default, the arguments to a subroutine call are passed in which variable?

    [ ] $ARGV
    [ ] @ARGV
    [ ] @ARGS
    [ ] $_
    [X] @_


________________________________________________________________________________

26. Which of the following parameter lists declares
    a subroutine that requires at least two arguments,
    but which will also accept three or more arguments?

    [ ] sub two_or_more ($flag, $tag, ...)       {...}
    [ ] sub two_or_more ($data, $tag, $flag)     {...}
    [X] sub two_or_more ($flag, $tag, @data)     {...}
    [ ] sub two_or_more ($flag, $data = $tag)    {...}
    [ ] sub two_or_more (@flags, @tags, @data)   {...}


________________________________________________________________________________

27. If a user-defined subroutine does not contain a 'return' statement...

    [ ] ...it will return the value the last expression it actually evaluates
    [ ] ...it will never return and will continue to execute forever
    [ ] ...it will throw an exception after executing its final statement
    [X| ...it will return the value the final statement in its definition
    [ ] ...it will return 'undef'


________________________________________________________________________________

28. The keyword to throw an exception in Perl is:

    [ ] 'exit'
    [ ] 'raise'
    [ ] 'throw'
    [ ] 'except'
    [X] 'die'


________________________________________________________________________________

29. How are exceptions are caught and accessed in Perl?

    [ ] Exceptions in Perl can't be caught or accessed after they're thrown
    [ ] Caught in a 'try' block;    accessed via a 'catch' block
    [ ] Caught in a 'catch' block'; accessed via the special $! variable
    [ ] Caught in a 'do' block;     accessed via the builtin 'eval' function
    [X] Caught in an 'eval' block;  accessed via the special $@ variable


________________________________________________________________________________

30. What is the purpose of the 'use strict' pragma?

    [ ] It disallows undeclared variables, barewords, and symbolic references
    [ ] It prevents any construct that might also be valid C code
    [ ] It reports all errors using verbose (and harshly worded) error messages
    [X] It converts all warnings to fatal errors
    [ ] It disallows package variables (all variables must be declared with 'my')


================================================================================
                                  END OF EXAM
================================================================================
